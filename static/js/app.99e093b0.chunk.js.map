{"version":3,"sources":["assets/splash.png","webpack:///./assets/index.css?05c6","assets/index.css","components/index.js","components/myweb.js","components/myweblocalhost.js","components/constants.js","components/mywebinlinehtml.js","components/mywebinlineJSfn.js","components/mywebimportJSfn.js","components/testexportfn.js","components/mywebdata.js","App.js","index.js","assets/index.html"],"names":["module","exports","api","content","__esModule","default","i","options","locals","___CSS_LOADER_API_IMPORT___","push","window","onload","event","console","log","MyWeb","SafeAreaView","style","flex","source","uri","Component","MyWebLocalhost","customHTML","runFirst","runBeforeFirst","MyWebHtml","html","MyWebInlineJSFn","onMessage","injectedJavaScript","injectedJavaScriptBeforeContentLoaded","MyWebImportJSFn","counter","script","selectedLanguage","languages","Math","floor","random","length","selectProgrammingLanguage","setInterval","webref","injectJavaScript","Platform","OS","src","height","width","ref","r","params","nativeEvent","data","alert","javaScriptEnabledAndroid","javaScriptEnabled","MyWebData","View","alignItems","TouchableOpacity","onPress","this","sendDataToWebView","padding","marginTop","backgroundColor","Text","fontSize","color","scalesPageToFit","mixedContentMode","StyleSheet","create","sectionContainer","paddingHorizontal","sectionTitle","fontWeight","sectionDescription","highlight","container","justifyContent","registerRootComponent","Device","___HTML_LOADER_GET_SOURCE_FROM_IMPORT___","___HTML_LOADER_IMPORT_0___","___HTML_LOADER_IMPORT_1___","code"],"mappings":"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","file":"static/js/app.99e093b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/splash.59202d46.png\";","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".title {\\r\\n    background-color: red;\\r\\n    color: white\\r\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","window.onload = (event) => {\r\n  console.log('file is fully loaded');\r\n};","import { Component } from 'react';\r\nimport { SafeAreaView } from 'react-native';\r\nimport { WebView } from 'react-native-webview';\r\n\r\n\r\nclass MyWeb extends Component {\r\n    render() {\r\n      return (\r\n        <SafeAreaView style={{ flex: 1 }}>\r\n          <WebView \r\n            source={{ uri: 'https://reactnative.dev/' }} \r\n          />\r\n        </SafeAreaView>\r\n      );\r\n    }\r\n  }\r\n\r\nexport { MyWeb };","import { Component } from 'react';\r\nimport { SafeAreaView } from 'react-native';\r\nimport { WebView } from 'react-native-webview';\r\nclass MyWebLocalhost extends Component {\r\n    render() {\r\n      return (\r\n        <SafeAreaView style={{ flex: 1 }}>\r\n          <WebView \r\n            source={{ uri: 'http://10.10.100.115/' }} \r\n          />\r\n        </SafeAreaView>\r\n      );\r\n    }\r\n  }\r\n\r\nexport { MyWebLocalhost };","const customHTML = `\r\n  <body style=\"display:flex; flex-direction: column;justify-content: center; \r\n    align-items:center; background-color: black; color:white; height: 100%;\">\r\n      <h1 style=\"font-size:100px; padding: 50px; text-align: center;\" \r\n      id=\"h1_element\">\r\n        This is simple html\r\n      </h1>\r\n      <h2 style=\"display: block; font-size:80px; padding: 50px; \r\n      text-align: center;\" id=\"h2_element\">\r\n        This text will be changed later!\r\n      </h2>\r\n    </body>`;\r\n\r\n\r\nconst runFirst = `\r\n    setTimeout(function() { \r\n        document.getElementById(\"h1_element\").innerHTML = \r\n        \"What is your favourite language?\";\r\n        document.getElementById(\"h2_element\").innerHTML =\r\n        \"We will see!\";\r\n      }, 1000);\r\n    true; // note: this is required, or you'll sometimes get silent failures\r\n  `;\r\n\r\nconst runBeforeFirst = `\r\n    window.isNativeApp = true;\r\n    true; // note: this is required, or you'll sometimes get silent failures\r\n`;\r\n\r\nexport {customHTML, runFirst, runBeforeFirst};","import { Component } from 'react';\r\nimport { SafeAreaView } from 'react-native';\r\nimport { WebView } from 'react-native-webview';\r\nimport { customHTML } from './constants.js';\r\n\r\nclass MyWebHtml extends Component {\r\n  render() {\r\n    return (\r\n      <SafeAreaView style={{ flex: 1 }}>\r\n        <WebView \r\n          source={{ html: customHTML }} \r\n        />\r\n      </SafeAreaView>\r\n    );\r\n  }\r\n}\r\n\r\nexport { MyWebHtml };","import { Component } from 'react';\r\nimport { SafeAreaView } from 'react-native';\r\nimport { WebView } from 'react-native-webview';\r\nimport { customHTML, runFirst, runBeforeFirst } from './constants.js';\r\n\r\nclass MyWebInlineJSFn extends Component {\r\n    render() {\r\n  \r\n      return (\r\n        <SafeAreaView style={{ flex: 1 }}>\r\n          <WebView \r\n            source={{ html: customHTML }} \r\n            onMessage={(event) => {}}\r\n            injectedJavaScript={runFirst}\r\n            injectedJavaScriptBeforeContentLoaded={runBeforeFirst}\r\n          />\r\n        </SafeAreaView>\r\n      );\r\n    }\r\n  }\r\n\r\nexport { MyWebInlineJSFn };\r\n","import { SafeAreaView, Platform } from 'react-native';\r\nimport { React, Component } from 'react';\r\nimport { WebView } from 'react-native-webview';\r\n\r\nimport { customHTML, runFirst, runBeforeFirst } from './constants.js';\r\nimport { TestC } from './testexportfn.js';\r\nimport { TestA, TestB } from './testexportfn';\r\n\r\nconst selectProgrammingLanguage = () => {\r\n  const languages = [\r\n    \"Rust\",\r\n    \"Python\",\r\n    \"JavaScript\",\r\n    \"TypeScript\",\r\n    \"C++\",\r\n    \"Go\",\r\n    \"R\",\r\n    \"Java\",\r\n    \"PHP\",\r\n    \"Kotlin\",\r\n  ];\r\n  const randomInt = Math.floor(Math.random() * languages.length);\r\n  return languages[randomInt];\r\n};\r\n\r\nclass MyWebImportJSFn extends Component {\r\n  render() {\r\n  let counter = 1;\r\n  console.log(\"counter = \" + counter);\r\n\r\n  const script = () => {\r\n      const selectedLanguage = selectProgrammingLanguage();\r\n      counter += 1;\r\n      const newURL = \"https://blog.logrocket.com\";\r\n      const redirectTo = 'window.location = \"' + newURL + '\"';\r\n\r\n      if (counter <= 3) {\r\n        return `\r\n          if (document.body.style.backgroundColor === 'white') {\r\n            document.body.style.backgroundColor = 'black'\r\n            document.body.style.color = 'white'\r\n          } else {\r\n            document.body.style.backgroundColor = 'white'\r\n            document.body.style.color = 'black'\r\n          };\r\n\r\n          document.getElementById(\"h2_element\").innerHTML = \"${selectedLanguage}?\";\r\n          window.ReactNativeWebView.postMessage(\"counter: ${counter}\");\r\n          true;  // note: this is required, or you'll sometimes get silent failures\r\n      `;\r\n      } else if (counter === 4) {\r\n        return `\r\n          window.ReactNativeWebView.postMessage(\"you are now getting redirected!\");\r\n          ${redirectTo};\r\n          true;  // note: this is required, or you'll sometimes get silent failures\r\n        `;\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n    setInterval(() => {\r\n        this.webref.injectJavaScript(script());\r\n      }, 7000);\r\n\r\n    return (\r\n        Platform.OS === \"web\" ?\r\n        ( <iframe src=\"http://10.10.100.115/\" height={'100%'} width={'100%'} /> )\r\n        : \r\n        (\r\n          <SafeAreaView style={{ flex: 1 }}>\r\n            <WebView \r\n              source={{ html: customHTML }} \r\n              ref={(r) => (this.webref = r)}\r\n              onMessage={(event) => {\r\n                console.log(event.nativeEvent.data);\r\n                //if (event.nativeEvent.data !== undefined) {\r\n                  // TestA(event.nativeEvent.data);\r\n                  TestC(event.nativeEvent.data);\r\n                //}\r\n              }}\r\n              javaScriptEnabledAndroid={true}\r\n              javaScriptEnabled={true}\r\n              injectedJavaScript={runFirst}\r\n              injectedJavaScriptBeforeContentLoaded={runBeforeFirst}\r\n            />\r\n          </SafeAreaView>\r\n        )\r\n    );\r\n  }\r\n}\r\n\r\nexport { MyWebImportJSFn };","// ES6 Modules or TypeScript\r\nimport Swal from 'sweetalert2'\r\n\r\n// module.exports.TestA = function (params) {\r\n//     //  console.log(\"12345678: \" + params)\r\n//      alert(\"TestA: \" + params)\r\n// }\r\n\r\n// module.exports.TestB = () => {\r\n//     //  console.log(\"12345678: \" + params)\r\n//      alert(\"TestB: 123456789\")\r\n// }\r\n\r\nexport function TestC (params) {\r\n    // console.log(\"This is exported function C: params=\" + params)\r\n    alert(\"TestC: \" + params); \r\n\r\n    // Swal.fire({\r\n    //     position: 'center',\r\n    //     icon: 'success',\r\n    //     title: 'param',\r\n    //     showConfirmButton: false,\r\n    //     timer: 1500\r\n    // })\r\n\r\n    // let timerInterval;\r\n\r\n    // Swal.fire({\r\n    //   title: 'Auto close alert TestC !',\r\n    //   html: ' I will close in <b></b> milliseconds.',\r\n    //   timer: 1000,\r\n    //   timerProgressBar: true,\r\n    //     didOpen: () => {\r\n    //       Swal.showLoading()\r\n    //       const b = Swal.getHtmlContainer().querySelector('b')\r\n    //       timerInterval = setInterval(() => {\r\n    //         b.textContent = Swal.getTimerLeft()\r\n    //       }, 100)\r\n    //     },\r\n    //     willClose: () => {\r\n    //       clearInterval(timerInterval)\r\n    //     }\r\n    // }).then((result) => {\r\n    //   /* Read more about handling dismissals below */\r\n    //   if (result.dismiss === Swal.DismissReason.timer) {\r\n    //     console.log('I was closed by the timer')\r\n    //   }\r\n    // })\r\n}","import React, {useRef} from 'react';\r\nimport {\r\n  SafeAreaView,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  Platform,\r\n} from 'react-native';\r\nimport {WebView} from 'react-native-webview';\r\n\r\nconst MyWebData = () => {\r\n  function onMessage(data) {\r\n    console.log(\"on Message - \" + data.nativeEvent.data);\r\n    alert(data.nativeEvent.data);\r\n  }\r\n\r\n  let counter = 0;\r\n  function sendDataToWebView() {\r\n    counter++;\r\n    console.log(\"counter = \" + counter);\r\n    this.webref.injectJavaScript(script(counter));\r\n  }\r\n\r\n  // const webviewRef = useRef();\r\n  const script = (data) => {\r\n    return `\r\n      window.ReactNativeWebView.postMessage(\"Data from React Native App: ` + data + `\");\r\n      true;  // note: this is required, or you'll sometimes get silent failures\r\n    `;\r\n  };\r\n\r\n  const html =  ` \r\n            <html>\r\n            <head>\r\n              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n            </head>\r\n            <body\r\n              style=\"\r\n                display: flex;\r\n                justify-content: center;\r\n                flex-direction: column;\r\n                align-items: center;\r\n              \"\r\n            >\r\n              <button\r\n              onclick=\"sendDataToReactNativeApp()\"\r\n                style=\"\r\n                  padding: 20;\r\n                  width: 200;\r\n                  font-size: 20;\r\n                  color: white;\r\n                  background-color: #6751ff;\r\n                \"\r\n              >\r\n                Send Data To React Native App\r\n              </button>\r\n              <script>\r\n                const sendDataToReactNativeApp = async () => {\r\n                  window.ReactNativeWebView.postMessage('Data from WebView / Website');\r\n                };\r\n                window.addEventListener(\"message\", message => {\r\n                  alert(message.data) \r\n                });\r\n              </script>\r\n            </body>\r\n          </html>        \r\n  `;\r\n\r\n  return (\r\n    // Platform.OS === \"web\" ?\r\n    // ( <iframe src=\"http://10.10.100.124/\" height={'100%'} width={'100%'} /> )\r\n    // :\r\n    (\r\n      <SafeAreaView style={{flex: 1}}>\r\n        <View style={{alignItems: 'center'}}>\r\n          <TouchableOpacity\r\n            onPress={ () => {sendDataToWebView();} }\r\n            style={{\r\n              padding: 20,\r\n              width: 300,\r\n              marginTop: 100,\r\n              backgroundColor: '#6751ff',\r\n              alignItems: 'center',\r\n            }}>\r\n            <Text style={{fontSize: 20, color: 'white'}}>\r\n              Send Data To WebView / Website\r\n            </Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n        <WebView\r\n          ref={(r) => (this.webref = r)}\r\n          scalesPageToFit={false}\r\n          mixedContentMode=\"compatibility\"\r\n          onMessage={onMessage}\r\n          source={{\r\n            html: html\r\n          }}\r\n          javaScriptEnabledAndroid={true}\r\n          javaScriptEnabled={true}\r\n        />\r\n      </SafeAreaView>\r\n    )\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  sectionContainer: {\r\n    marginTop: 32,\r\n    paddingHorizontal: 24,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 24,\r\n    fontWeight: '600',\r\n  },\r\n  sectionDescription: {\r\n    marginTop: 8,\r\n    fontSize: 18,\r\n    fontWeight: '400',\r\n  },\r\n  highlight: {\r\n    fontWeight: '700',\r\n  },\r\n});\r\n\r\nexport { MyWebData };","import 'expo-dev-client';\n\nimport { SafeAreaView, StyleSheet, Platform } from 'react-native';\nimport { React, Component, useState, useRef, useEffect } from 'react';\nimport { WebView } from 'react-native-webview';\n\nimport { FileSystemCancellableNetworkTask, readAsStringAsync } from \"expo-file-system\";\nimport { useAssets } from \"expo-asset\";\nimport * as Device from 'expo-device';\n// import { StaticServer } from \"react-native-static-server\";\n\nimport { MyWeb } from './components/myweb.js'\nimport { MyWebLocalhost } from './components/myweblocalhost.js';\nimport { MyWebLocalHtml } from './components/myweblocalhtml.js';\nimport { MyWebHtml } from './components/mywebinlinehtml.js';\nimport { MyWebInlineJSFn } from './components/mywebinlineJSfn.js';\nimport { MyWebImportJSFn } from './components/mywebimportJSfn.js';\n// import { MyWebLocalHtmlx } from './components/myweblocalhtml.js';\n\nimport { GenLocalHtml } from './components/myweblocalhtml.js';\nimport { MyWebData } from './components/mywebdata.js';\n\nconst myweb = new MyWeb();\nconst myweblocalhost = new MyWebLocalhost();\n// const myweblocalhtml = new MyWebLocalHtml();\nconst mywebinlinehtml = new MyWebHtml();\nconst mywebinlineJSfn = new MyWebInlineJSFn();\nconst mywebimportJSfn = new MyWebImportJSFn();\n// const mywebdata = new MyWebData();\n\nexport default function App() {\n\n  console.log(\"device is === \" + Device.deviceName);\n\n  // const serverRef = useRef();\n  // if (!serverRef.current) {\n  //   serverRef.current = new StaticServer(5556, \n  //                             \"./assets\", { localOnly: true, keepAlive: true });\n  //   console.log(\"  ---------------- \");                              \n  // } else {\n  //   console.log(\"--------------- server ???\");\n  // }\n  // console.log(\" 112 \");\n  // const server = serverRef.current;\n  // const [uri] = useState(`http://localhost:${server.port}`);\n\n  // console.log(\"uri: \" + uri);\n\n  // useEffect(() => {\n  //   server.start().then((url) => {\n  //     console.log(\"Serving at URL\", url);\n  //   });\n\n  //   () => {\n  //     // Stop the server\n  //     server.stop();\n  //     console.log(\"Server stop!\");\n  //   }\n  // }, []);\n\n  return (\n    // <SafeAreaView style={styles.container}>\n    //   <WebView\n    //     style={styles.container}\n    //     originWhitelist={[\"*\"]}\n    //     source={{ uri }}\n    //     cacheEnabled={true}\n    //     cacheMode={\"LOAD_CACHE_ONLY\"}\n    //     limitsNavigationsToAppBoundDomains={true}\n    //   />\n    //   <StatusBar style=\"auto\" />\n    // </SafeAreaView>\n    // myweb\n    // mywebinlinehtml\n    // MyWebLocalHtml()\n    // myweblocalhost\n    // myweblocalhtml\n    // myweblocalhtml2\n    // mywebimportJSfn\n    MyWebData()\n      // <MyWeb />\n      // <MyWebHtml />\n      // <MyWebLocalhost/>\n      // <MyWebLocalHtml />\n      // <MyWebJS />\n      // <MyWebJScript />\n  );\n\n  // return (\n  //   <View style={styles.container}>\n  //     {/* <MyWeb> a test webview </MyWeb> */}\n  //     <MyWebHtml> a html</MyWebHtml>\n  //     <Text>Open up App.js to start working on your app!</Text>\n  //     <StatusBar style=\"auto\" />\n  //   </View>\n  // );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","// Imports\nvar ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ = require(\"../../../node_modules/html-loader/dist/runtime/getUrl.js\");\nvar ___HTML_LOADER_IMPORT_0___ = require(\"./index.css\");\nvar ___HTML_LOADER_IMPORT_1___ = require(\"../components/index.js\");\n// Module\nvar ___HTML_LOADER_REPLACER_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACER_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \"<!doctype html> <html lang=en> <head> <meta charset=UTF-8 /> <meta http-equiv=X-UA-Compatible content=\\\"IE=edge\\\"/> <meta name=viewport content=\\\"width=device-width,initial-scale=1\\\"/> <title>Document</title> <link rel=stylesheet href=\" + ___HTML_LOADER_REPLACER_0___ + \" /> </head> <body style=display:flex;flex-direction:column;justify-content:center;align-items:center;background-color:#000;color:#fff;height:100%> <h1 style=font-size:100px;padding:50px;text-align:center id=h1_element> This is simple html </h1> <h2 style=display:block;font-size:80px;padding:50px;text-align:center id=h2_element> This text will be changed later! </h2> <div class=title>Hello! this is a test component</div> <script src=\" + ___HTML_LOADER_REPLACER_1___ + \"></script> </body> </html>\";\n// Exports\nmodule.exports = code;"],"sourceRoot":""}